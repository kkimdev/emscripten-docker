#!/usr/bin/env python2

import argparse
import subprocess
import datetime
import time
import os
import json
import re
import sys

from urllib import urlopen
from itertools import repeat

# TODO: https://github.com/jwilder/docker-squash
# TODO: docker ps --filter "status=exited" | grep 'hours ago' | awk '{print $1}' | xargs --no-run-if-empty docker rm

EMSDK_GIT_REPO = "https://github.com/kripken/emscripten/"
DOCKER_REGISTRY = "registry.hub.docker.com"
DOCKER_REPO = "trzeci/emscripten"
DOCKER_REPO_SLIM = "trzeci/emscripten-slim"

SDK_MIN = "1.37.16"
QUEUE_FILE = "queue.txt"
LOG_COMPILATION = "build.log"

TEST_CASES = {
    DOCKER_REPO_SLIM : [
        "emcc src/test.cpp -o src/test.js && node src/test.js",
        "emcc src/test.cpp -o src/test.js && node src/test.js",
        "emcc src/test.cpp -o src/test.js -s WASM=1 ",
        "nodejs --version",
        "node --version",
        "python --version",
        
    ],
    DOCKER_REPO : [
        "emcc src/test.cpp -o src/test.js && node src/test.js",
        "emcc src/test.cpp -o src/test.js && node src/test.js",
        "emcc src/test.cpp -o src/test.js --closure 1 && node src/test.js",
        "emcc src/test.cpp -o src/test.js -s WASM=1 ",
        "nodejs --version",
        "node --version",
        "python --version",
        "wget --version",
        "curl --version",
        "zip --version",
        "unzip -version",
        "make --version",
        "cmake --version",
        "git --version",
        "which ssh",
        "perl --version",
    ], 
}


# Utils ------------------------------------------------------------------------
class Dashboard:
    task = ""
    task_progress = ""
    step = ""
    status = ""
    log_trace = ""
    status_progress = ""

    last_status = ""

    def update(self):
        status = "[{task_progress}]({task})[{step}][{status_progress}%]({status}) {trace}\r".format(
            task_progress = self.task_progress,
            task = self.task,
            step = self.step,
            status = self.status,
            status_progress = self.status_progress,
            trace = self.log_trace,
        )
        self.tail(status)

    def tail(self, status):
        if len(self.last_status) > len(status):
            sys.stdout.write(" " * len(self.last_status) + "\r")
            sys.stdout.flush()

        self.last_status = status
        sys.stdout.write(status)
        sys.stdout.flush()


    def set_task(self, task, index, length):
        self.step = ""
        self.status = ""
        self.status_progress = ""
        self.log_trace = ""

        self.task = task
        self.task_progress = "{i}/{o}".format(i=index, o=length)
        self.update()

    def set_status(self, status):
        self.status = status
        self.log_trace = ""
        self.update()

    def set_step(self, step):
        self.step = step

    def set_progress(self, progress):
        self.status_progress = progress
        self.update()

    def trace(self,trace):
        self.log_trace = trace
        self.update()

    def log(self, text):
        copy = self.last_status
        self.tail("")
        print(text) # and moves up
        self.tail(copy)


def log(text, console=False):
    if console:
        dashboard.log(text)

    with open(LOG_COMPILATION, "a") as f:
        f.write("\n[{time}] {text}".format(time=datetime.datetime.now(), text=text))

def version_compare(x, y):
    a = 1 if is_version_at_least(x, y) else 0
    b = 1 if is_version_at_least(y, x) else 0
    return a - b

def is_version_at_least(ver, target):
    ver = ver.split('.')
    target = target.split('.')
    while len(ver) < len(target):
        ver += ['0']
    for i in range(len(ver)):
        if int(ver[i]) < int(target[i]):
            return False
        elif int(ver[i]) > int(target[i]):
            return True
    return True

#  Emscripten Helpers ----------------------------------------------------------

class EMBuild:
    def __init__(self, emscripten_sdk, update):
        self.emscripten_sdk = emscripten_sdk
        self.update = update

    @property
    def docker_name(self, docker_project):
        return docker_project + ":" + self.emscripten_sdk

    @property
    def docker_tag(self):
        return self.emscripten_sdk


class EMHelper:
    @staticmethod
    def get_sdk_name_tag(tag, bits):
        return "sdk-tag-{tag}-{bits}bit".format(tag=tag, bits=bits)

    @staticmethod
    def get_sdk_name_branch(branch, bits):
        return "sdk-{branch}-{bits}bit".format(branch=branch, bits=bits)


    @staticmethod
    def get_emscripten_tags(min_version):
        tags = subprocess.check_output(["git", 'ls-remote', '--tags', EMSDK_GIT_REPO]).decode("utf-8").strip().split("\n")
        all_tags = []
        for t in tags:
            try:
                t = t[t.index('refs/tags/') + len('refs/tags/'):].strip()
                if is_version_at_least(t, min_version):
                    all_tags += [t]
            except:
                pass
        sorted(all_tags, cmp=version_compare)
        return all_tags


class EmscriptenTester:
    @staticmethod
    def test_image(id, remove_image=False):
        log("TESTING: " + id)
        test_successed = True

        docker_project = DockerHelper.decompose_image_id(id)[0]
        if docker_project not in TEST_CASES:
            log("Missing defined test cases for %s, fallback to base tests" % docker_project)
            tests = TEST_CASES[DOCKER_REPO_SLIM]
        else:
            tests = TEST_CASES[docker_project]

        # FIXME: Doesn't detect local storage 
        # if subprocess.call(["docker pull {id}".format(id=id)], shell=True):
            # print("[ERROR] Image wasn't pulled and it's not stored locally: " + id)
            # return False

        for test in tests:
            log("Perform test `%s`" % test)
            log("[TEST] %s" % test)
            p = subprocess.Popen(["docker", "run", "--rm",
                "-v", "$(pwd):/src",
                "-u", "emscripten",
                id, test],
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )
            out, err = p.communicate()

            if err:
                log(err)

            if out:
                log(out)

            if p.returncode:
                log("[ERROR] Testing {id} failed".format(id=id))
                test_successed = False
                
        if remove_image:
            subprocess.call(["docker rmi {id}".format(id=id)], shell=True)

        if test_successed:
            log("TEST: {} - SUCCESS".format(id), True)
        else:
            log("TEST: {} - FAIL".format(id), True)
                
        return test_successed


class DockerHelper:
    @staticmethod
    def get_server_tags(repo):
        api = "https://{registry}/v1/repositories/{repo}/tags".format(repo=repo, registry=DOCKER_REGISTRY)
        response = urlopen(api)
        data = json.loads(str(response.read()))
        result = []
        for node in data:
            result.append(str(node["name"]))
        return result

    @staticmethod
    def decompose_image_id(image_id):
        print(image_id)
        project, tag = image_id.split(":")
        return (project, tag)

    @staticmethod
    def push_image(image):
        for i in repeat(None, 3):
            if subprocess.call(["docker", "push", image]):
                log("[WARNING] Pushing {image} failed. Repeat.".format(image=image))
            else:
                log("[INFO] Pushed tag: {image} ".format(image=image))
                subprocess.call(["docker", "rmi", "-f", image])
                return
        log("[ERROR] Pushing {image} failed.".format(image=image))

# --------------VV------------- NOT REFACTORED YET --------------VV------------- 

def get_builds(tags, update=False, branches=False, releases=False, b32=False, b64=False):
    result = []

    bit_versions = []
    bit_versions.append("32") if b32 else None
    bit_versions.append("64") if b64 else None

    for bits in bit_versions:
        if releases:
            for tag in tags:
                sdk = EMHelper.get_sdk_name_tag(tag, bits)
                result.append(EMBuild(sdk, update))
        if branches:
            for branch in ["incoming", "master"]:
                sdk = EMHelper.get_sdk_name_branch(branch, bits)
                result.append(EMBuild(sdk, True))
    return result


def compile_image(image_id):
    t_start = datetime.datetime.now()
    docker_project, emscripten_sdk = DockerHelper.decompose_image_id(image_id)
    log("[INFO] Start compiling [{i}]".format(i=image_id))
    with open(LOG_COMPILATION, "a") as f:
        p = subprocess.Popen([
            "docker", 
            "build", 
            "-t", image_id,
            "--build-arg", "EMSCRIPTEN_SDK=" + emscripten_sdk,
            "--build-arg", "BUILD_DATE="+datetime.datetime.now().isoformat('T'),
            # "--build-arg", "BUILD_DATE=0",
            "--build-arg", "VCS_REF="+subprocess.check_output("git rev-parse --short HEAD".split(" ")).strip(),
            "docker/" + docker_project
        ], stdout=subprocess.PIPE)

        for l in iter(p.stdout.readline, ''):
            f.write(l)
            f.flush()

            r = re.match(r'## (.+)', l)
            if r:
                dashboard.set_status(r.groups()[0])
                continue

            r = re.match(r'\[\s*(\d+)\%]', l)
            if r:
                dashboard.set_progress(int(r.groups()[0]))
                continue

            r = re.match(r'Step (\d+/\d+)', l)
            if r:
                dashboard.set_step(r.groups()[0])
                continue

            r = re.match(r'\] Built target (.+)', l)
            if r:
                dashboard.trace(r.groups()[0])
                continue

            r = re.match(r'Unpacking (.+) ', l)
            if r:
                dashboard.trace(r.groups()[0])
                continue

    log("[INFO] Compiled [{tag}] in: {time}".format(tag=image_id, time=str(datetime.datetime.now() - t_start)), True)
    return True

def defer_push(image_name):
    with open(QUEUE_FILE, 'w+') as f:
        data = f.read().splitlines(True)
        data.insert(0, image_name + "\n")
        f.writelines(data)
        log("[INFO] Defered pushing name: {name} ".format(name=image_name))


def get_sdk_to_compile(em_builds, docker_tags):
    result = []
    for b in em_builds:
        if b.docker_tag not in docker_tags:
            b.update = True

        if b.update:
            result.append(b.docker_tag)
    return result


# ------------------------------------------------------------------------------

def build(args):
    """Build images, and push tags to the queue"""

    # ["1.23.4", ...]
    emscripten_tags = EMHelper.get_emscripten_tags(SDK_MIN)
    # List of pushed tags to Docker, in format: ['sdk-master-32bit', ...]
    docker_tags = DockerHelper.get_server_tags(DOCKER_REPO)

    # list of build description: [EMBuild...]
    em_bulds = get_builds(emscripten_tags, args.update, args.branches, args.releases, args.no_32, args.no_64)

    images_to_compile = []
    for sdk in get_sdk_to_compile(em_bulds, docker_tags):
        for r in [DOCKER_REPO_SLIM, DOCKER_REPO]:
            images_to_compile.append("{}:{}".format(r, sdk))

    # if tag was given explicitly, then use it
    for sth in args.sdks:
        # sdk can be either: full docker image id, or a tag. 
        if sth.find(":") >= 0:
            images_to_compile.append(sth)
        elif re.match(r'^\d+\.\d+\.\d+$', sth):
            for b in ["64", "32"]:
                for r in [DOCKER_REPO_SLIM, DOCKER_REPO]:
                    images_to_compile.append("{r}:{t}".format(r=r, t=EMHelper.get_sdk_name_tag(sth, b)))
        elif sth in ["master", "incoming"]:
            for b in ["64", "32"]:
                for r in [DOCKER_REPO_SLIM, DOCKER_REPO]:
                    images_to_compile.append("{r}:{t}".format(r=r, t=EMHelper.get_sdk_name_branch(sth, b)))
        else:
            images_to_compile.append(DOCKER_REPO_SLIM + ":" + sth)
            images_to_compile.append(DOCKER_REPO + ":" + sth)
    
    for i, image_id in enumerate(images_to_compile):
        dashboard.set_task(image_id, i + 1, len(images_to_compile))
        
        if compile_image(image_id) and EmscriptenTester.test_image(image_id):
            log("{} - SUCCESS".format(image_id), True)
            defer_push(image_id)
        else:
            log("{} - FAIL".format(image_id), True)
            if args.fast_fail:
                exit(1)
            

def test(args):
    """Run tests"""
    for tag in args.tags:
        EmscriptenTester.test_image((args.project or DOCKER_REPO) + ":" + tag, args.spotless)

def push(args):
    """Push created tags, what are waiting in queue document """
    while True:
        if os.path.exists(QUEUE_FILE):
            with open(QUEUE_FILE, 'r') as fin:
                data = fin.read().splitlines(True)
            if len(data):
                tag_to_send = data[0].strip()
                with open(QUEUE_FILE, 'w') as fout:
                    fout.writelines(data[1:])
                if tag_to_send:
                    DockerHelper.push_image(tag_to_send)
        time.sleep(2)


dashboard = Dashboard()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Emscripten Image generator')
    subparsers = parser.add_subparsers(title="command", help="Main work command")

    parser_build = subparsers.add_parser("compile", help="Compile Docker images")
    parser_build.set_defaults(function=build)
    parser_build.add_argument("sdks", type=str, nargs='*', help="Explicitly provide list of Emscripten SDKs in format sdk-incoming-32bit or sdk-tag-1.37.17-32bit")
    parser_build.add_argument("--no-32", action="store_false", help="Explicitly disable 32 images")
    parser_build.add_argument("--no-64", action="store_false", help="Explicitly disable 64 images")
    parser_build.add_argument("--update", action="store_true", help="Update docker images that are arleady created and pushed")
    parser_build.add_argument("--branches", action="store_true", help="Update master and incomming images")
    parser_build.add_argument("--releases", action="store_true", help="Update released SDKs")
    parser_build.add_argument("--fast-fail", action="store_true", help="Stops queue after first failure")
    
    parser_test = subparsers.add_parser("test", help="Test given tag(s) with Emscripten and WebAssembly compatibility")
    parser_test.set_defaults(function=test)
    parser_test.add_argument("tags", type=str, nargs='*', help="List of docker tags to test")
    parser_test.add_argument("--spotless", action="store_true", help="Remove used image")
    parser_test.add_argument("--project", help="Custom docker project")

    parser_push = subparsers.add_parser("push", help="Runs a service what will push created images")
    parser_push.set_defaults(function=push)

    # parser.add_argument("--pusher", action="store_true", help="Pushes tags created by regular command")
    args = parser.parse_args()
    args.function(args)
